
ATTINY1627_TLC5916_FULL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000236  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00803800  00803800  000002aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031f9  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020e7  00000000  00000000  000036d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db6  00000000  00000000  000057bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  00006574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000131d  00000000  00000000  000067e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000476  00000000  00000000  00007b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00007f77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a3 30       	cpi	r26, 0x03	; 3
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  98:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a0:	0e 94 a7 00 	call	0x14e	; 0x14e <system_init>
  a4:	08 95       	ret

000000a6 <main>:
char output;

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  a6:	0e 94 50 00 	call	0xa0	; 0xa0 <atmel_start_init>
	
	output = 0;
  aa:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <output>
	
	/* Replace with your application code */
	while (1) {
		transmitCharacter(++output);		
  ae:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <output>
  b2:	8f 5f       	subi	r24, 0xFF	; 255
  b4:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <output>
  b8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <transmitCharacter>
		USART0.TXDATAL = output;
  bc:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <output>
  c0:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2a e6       	ldi	r18, 0x6A	; 106
  c6:	84 e0       	ldi	r24, 0x04	; 4
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x24>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x2e>
  d4:	ec cf       	rjmp	.-40     	; 0xae <main+0x8>

000000d6 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	08 95       	ret

000000da <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	08 95       	ret

000000de <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 95       	ret

000000e2 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	08 c0       	rjmp	.+16     	; 0xf6 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  e6:	e8 2f       	mov	r30, r24
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	e0 5f       	subi	r30, 0xF0	; 240
  ec:	fb 4f       	sbci	r31, 0xFB	; 251
  ee:	90 81       	ld	r25, Z
  f0:	98 60       	ori	r25, 0x08	; 8
  f2:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	88 30       	cpi	r24, 0x08	; 8
  f8:	b0 f3       	brcs	.-20     	; 0xe6 <mcu_init+0x4>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	08 c0       	rjmp	.+16     	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	e0 5d       	subi	r30, 0xD0	; 208
 104:	fb 4f       	sbci	r31, 0xFB	; 251
 106:	90 81       	ld	r25, Z
 108:	98 60       	ori	r25, 0x08	; 8
 10a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 10c:	8f 5f       	subi	r24, 0xFF	; 255
 10e:	88 30       	cpi	r24, 0x08	; 8
 110:	b0 f3       	brcs	.-20     	; 0xfe <mcu_init+0x1c>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	08 c0       	rjmp	.+16     	; 0x126 <__EEPROM_REGION_LENGTH__+0x26>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 116:	e8 2f       	mov	r30, r24
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	e0 5b       	subi	r30, 0xB0	; 176
 11c:	fb 4f       	sbci	r31, 0xFB	; 251
 11e:	90 81       	ld	r25, Z
 120:	98 60       	ori	r25, 0x08	; 8
 122:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 124:	8f 5f       	subi	r24, 0xFF	; 255
 126:	88 30       	cpi	r24, 0x08	; 8
 128:	b0 f3       	brcs	.-20     	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 12a:	08 95       	ret

0000012c <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 12c:	84 b1       	in	r24, 0x04	; 4
 12e:	87 7f       	andi	r24, 0xF7	; 247
 130:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 132:	e3 e3       	ldi	r30, 0x33	; 51
 134:	f4 e0       	ldi	r31, 0x04	; 4
 136:	80 81       	ld	r24, Z
 138:	87 7f       	andi	r24, 0xF7	; 247
 13a:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 142:	84 b1       	in	r24, 0x04	; 4
 144:	84 60       	ori	r24, 0x04	; 4
 146:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB2_set_dir(PORT_DIR_OUT);

	USART_0_init();
 148:	0e 94 0d 01 	call	0x21a	; 0x21a <USART_0_init>
 14c:	08 95       	ret

0000014e <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 14e:	0e 94 71 00 	call	0xe2	; 0xe2 <mcu_init>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 152:	84 b1       	in	r24, 0x04	; 4
 154:	8f 7b       	andi	r24, 0xBF	; 191
 156:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 158:	e6 e3       	ldi	r30, 0x36	; 54
 15a:	f4 e0       	ldi	r31, 0x04	; 4
 15c:	80 81       	ld	r24, Z
 15e:	87 7f       	andi	r24, 0xF7	; 247
 160:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 162:	89 b1       	in	r24, 0x09	; 9
 164:	8e 7f       	andi	r24, 0xFE	; 254
 166:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 168:	88 b1       	in	r24, 0x08	; 8
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	88 b9       	out	0x08, r24	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 16e:	89 b1       	in	r24, 0x09	; 9
 170:	82 60       	ori	r24, 0x02	; 2
 172:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 174:	88 b1       	in	r24, 0x08	; 8
 176:	82 60       	ori	r24, 0x02	; 2
 178:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 17a:	89 b1       	in	r24, 0x09	; 9
 17c:	8b 7f       	andi	r24, 0xFB	; 251
 17e:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 180:	88 b1       	in	r24, 0x08	; 8
 182:	84 60       	ori	r24, 0x04	; 4
 184:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 186:	89 b1       	in	r24, 0x09	; 9
 188:	87 7f       	andi	r24, 0xF7	; 247
 18a:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 18c:	88 b1       	in	r24, 0x08	; 8
 18e:	88 60       	ori	r24, 0x08	; 8
 190:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	SDI_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
 192:	0e 94 6d 00 	call	0xda	; 0xda <CLKCTRL_init>

	USART_0_initialization();
 196:	0e 94 96 00 	call	0x12c	; 0x12c <USART_0_initialization>

	CPUINT_init();
 19a:	0e 94 6f 00 	call	0xde	; 0xde <CPUINT_init>

	SLPCTRL_init();
 19e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <SLPCTRL_init>

	BOD_init();
 1a2:	0e 94 6b 00 	call	0xd6	; 0xd6 <BOD_init>
 1a6:	08 95       	ret

000001a8 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	08 95       	ret

000001ac <transmitCharacter>:
 *  Author: dpneb
 */ 

#include "TLC5916.h"

void transmitCharacter(char p) {
 1ac:	cf 93       	push	r28
 1ae:	c8 2f       	mov	r28, r24
	disableOutput();
 1b0:	0e 94 09 01 	call	0x212	; 0x212 <disableOutput>
	sendChar(p);
 1b4:	8c 2f       	mov	r24, r28
 1b6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <sendChar>
	latch();
 1ba:	0e 94 fe 00 	call	0x1fc	; 0x1fc <latch>
	enableOutput();
 1be:	0e 94 05 01 	call	0x20a	; 0x20a <enableOutput>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <sendChar>:

#include "include/atmel_start_pins.h"

void sendChar(char p) {
	char bitMask = 1;
	for(char i = 0; i < 8; i++) {
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 */ 

#include "include/atmel_start_pins.h"

void sendChar(char p) {
	char bitMask = 1;
 1c8:	31 e0       	ldi	r19, 0x01	; 1
	for(char i = 0; i < 8; i++) {
 1ca:	12 c0       	rjmp	.+36     	; 0x1f0 <sendChar+0x2a>
		SDI_set_level((p & bitMask) > 0);
 1cc:	93 2f       	mov	r25, r19
 1ce:	98 23       	and	r25, r24
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
 1d0:	21 f0       	breq	.+8      	; 0x1da <sendChar+0x14>
		VPORTC.OUT |= (1 << pin);
 1d2:	99 b1       	in	r25, 0x09	; 9
 1d4:	98 60       	ori	r25, 0x08	; 8
 1d6:	99 b9       	out	0x09, r25	; 9
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <sendChar+0x1a>
	} else {
		VPORTC.OUT &= ~(1 << pin);
 1da:	99 b1       	in	r25, 0x09	; 9
 1dc:	97 7f       	andi	r25, 0xF7	; 247
 1de:	99 b9       	out	0x09, r25	; 9
		bitMask = bitMask << 1;
 1e0:	33 0f       	add	r19, r19
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 1e2:	99 b1       	in	r25, 0x09	; 9
 1e4:	91 60       	ori	r25, 0x01	; 1
 1e6:	99 b9       	out	0x09, r25	; 9
	} else {
		VPORTC.OUT &= ~(1 << pin);
 1e8:	99 b1       	in	r25, 0x09	; 9
 1ea:	9e 7f       	andi	r25, 0xFE	; 254
 1ec:	99 b9       	out	0x09, r25	; 9

#include "include/atmel_start_pins.h"

void sendChar(char p) {
	char bitMask = 1;
	for(char i = 0; i < 8; i++) {
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	28 30       	cpi	r18, 0x08	; 8
 1f2:	60 f3       	brcs	.-40     	; 0x1cc <sendChar+0x6>
 1f4:	89 b1       	in	r24, 0x09	; 9
 1f6:	87 7f       	andi	r24, 0xF7	; 247
 1f8:	89 b9       	out	0x09, r24	; 9
 1fa:	08 95       	ret

000001fc <latch>:
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 1fc:	89 b1       	in	r24, 0x09	; 9
 1fe:	84 60       	ori	r24, 0x04	; 4
 200:	89 b9       	out	0x09, r24	; 9
	} else {
		VPORTC.OUT &= ~(1 << pin);
 202:	89 b1       	in	r24, 0x09	; 9
 204:	8b 7f       	andi	r24, 0xFB	; 251
 206:	89 b9       	out	0x09, r24	; 9
 208:	08 95       	ret

0000020a <enableOutput>:
 20a:	89 b1       	in	r24, 0x09	; 9
 20c:	8d 7f       	andi	r24, 0xFD	; 253
 20e:	89 b9       	out	0x09, r24	; 9
 210:	08 95       	ret

00000212 <disableOutput>:
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 212:	89 b1       	in	r24, 0x09	; 9
 214:	82 60       	ori	r24, 0x02	; 2
 216:	89 b9       	out	0x09, r24	; 9
 218:	08 95       	ret

0000021a <USART_0_init>:
 * \retval 1 the USART init was not successful
 */
int8_t USART_0_init()
{

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(115200); /* set baud rate register */
 21a:	e0 e0       	ldi	r30, 0x00	; 0
 21c:	f8 e0       	ldi	r31, 0x08	; 8
 21e:	84 e7       	ldi	r24, 0x74	; 116
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	80 87       	std	Z+8, r24	; 0x08
 224:	91 87       	std	Z+9, r25	; 0x09
	//		 | USART_RS485_DISABLE_gc /* RS485 Mode disabled */
	//		 | 0 << USART_RXCIE_bp /* Receive Complete Interrupt Enable: disabled */
	//		 | 0 << USART_RXSIE_bp /* Receiver Start Frame Interrupt Enable: disabled */
	//		 | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
 226:	80 ec       	ldi	r24, 0xC0	; 192
 228:	86 83       	std	Z+6, r24	; 0x06
	// USART0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc /* Asynchronous Mode */
	//		 | USART_CHSIZE_8BIT_gc /* Character size: 8 bit */
	//		 | USART_PMODE_DISABLED_gc /* No Parity */
	//		 | USART_SBMODE_1BIT_gc; /* 1 stop bit */

	USART0.DBGCTRL = 1 << USART_DBGRUN_bp; /* Debug Run: enabled */
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	83 87       	std	Z+11, r24	; 0x0b
	// USART0.RXPLCTRL = 0x0 << USART_RXPL_gp; /* Receiver Pulse Length: 0x0 */

	// USART0.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	return 0;
}
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	08 95       	ret

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
