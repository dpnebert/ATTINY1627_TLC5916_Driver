
ATTINY1627_TLC5916_FULL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00803800  00803800  00000330  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003957  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000230e  00000000  00000000  00003f17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001168  00000000  00000000  00006225  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  00007390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001405  00000000  00000000  000076cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008dc  00000000  00000000  00008ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000093ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a5 30       	cpi	r26, 0x05	; 5
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  98:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a0:	0e 94 c6 00 	call	0x18c	; 0x18c <system_init>
  a4:	08 95       	ret

000000a6 <magiger>:
		magiger();
		
	}
}
void magiger() {
	switchToSpecialMode();
  a6:	0e 94 06 01 	call	0x20c	; 0x20c <switchToSpecialMode>
	
	writeConfiguration((count << 2) + 3);
  aa:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <count>
  ae:	88 0f       	add	r24, r24
  b0:	88 0f       	add	r24, r24
  b2:	8d 5f       	subi	r24, 0xFD	; 253
  b4:	0e 94 14 01 	call	0x228	; 0x228 <writeConfiguration>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	2a e6       	ldi	r18, 0x6A	; 106
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <magiger+0x18>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <magiger+0x22>
		
	
	_delay_us(100000);
	switchToNormalMode();
  c8:	0e 94 0d 01 	call	0x21a	; 0x21a <switchToNormalMode>
	allOn();
  cc:	0e 94 01 01 	call	0x202	; 0x202 <allOn>
  d0:	2a e6       	ldi	r18, 0x6A	; 106
  d2:	84 e0       	ldi	r24, 0x04	; 4
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <magiger+0x30>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <magiger+0x3a>
  e0:	08 95       	ret

000000e2 <main>:
void nightRider();
void magiger();

int main(void)
{
	atmel_start_init();
  e2:	0e 94 50 00 	call	0xa0	; 0xa0 <atmel_start_init>
	
	switchToNormalMode();
  e6:	0e 94 0d 01 	call	0x21a	; 0x21a <switchToNormalMode>
	counter = 0;
  ea:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <counter>
  ee:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <counter+0x1>
	count = 0;
  f2:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <count>
	
	enableOutput();
  f6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <enableOutput>
	allOn();
  fa:	0e 94 01 01 	call	0x202	; 0x202 <allOn>
  fe:	2a e6       	ldi	r18, 0x6A	; 106
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <__EEPROM_REGION_LENGTH__+0x4>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
	_delay_us(100000);
	while (1) {		
		magiger();
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <magiger>
 112:	fd cf       	rjmp	.-6      	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>

00000114 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret

00000118 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret

0000011c <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	08 95       	ret

00000120 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	08 c0       	rjmp	.+16     	; 0x134 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 124:	e8 2f       	mov	r30, r24
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	e0 5f       	subi	r30, 0xF0	; 240
 12a:	fb 4f       	sbci	r31, 0xFB	; 251
 12c:	90 81       	ld	r25, Z
 12e:	98 60       	ori	r25, 0x08	; 8
 130:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	88 30       	cpi	r24, 0x08	; 8
 136:	b0 f3       	brcs	.-20     	; 0x124 <mcu_init+0x4>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 c0       	rjmp	.+16     	; 0x14c <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 13c:	e8 2f       	mov	r30, r24
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	e0 5d       	subi	r30, 0xD0	; 208
 142:	fb 4f       	sbci	r31, 0xFB	; 251
 144:	90 81       	ld	r25, Z
 146:	98 60       	ori	r25, 0x08	; 8
 148:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	88 30       	cpi	r24, 0x08	; 8
 14e:	b0 f3       	brcs	.-20     	; 0x13c <mcu_init+0x1c>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 c0       	rjmp	.+16     	; 0x164 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 154:	e8 2f       	mov	r30, r24
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	e0 5b       	subi	r30, 0xB0	; 176
 15a:	fb 4f       	sbci	r31, 0xFB	; 251
 15c:	90 81       	ld	r25, Z
 15e:	98 60       	ori	r25, 0x08	; 8
 160:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	88 30       	cpi	r24, 0x08	; 8
 166:	b0 f3       	brcs	.-20     	; 0x154 <mcu_init+0x34>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 168:	08 95       	ret

0000016a <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 16a:	84 b1       	in	r24, 0x04	; 4
 16c:	87 7f       	andi	r24, 0xF7	; 247
 16e:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 170:	e3 e3       	ldi	r30, 0x33	; 51
 172:	f4 e0       	ldi	r31, 0x04	; 4
 174:	80 81       	ld	r24, Z
 176:	87 7f       	andi	r24, 0xF7	; 247
 178:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 17a:	85 b1       	in	r24, 0x05	; 5
 17c:	8b 7f       	andi	r24, 0xFB	; 251
 17e:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 180:	84 b1       	in	r24, 0x04	; 4
 182:	84 60       	ori	r24, 0x04	; 4
 184:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB2_set_dir(PORT_DIR_OUT);

	USART_0_init();
 186:	0e 94 50 01 	call	0x2a0	; 0x2a0 <USART_0_init>
 18a:	08 95       	ret

0000018c <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 18c:	0e 94 90 00 	call	0x120	; 0x120 <mcu_init>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 190:	84 b1       	in	r24, 0x04	; 4
 192:	8f 7b       	andi	r24, 0xBF	; 191
 194:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 196:	e6 e3       	ldi	r30, 0x36	; 54
 198:	f4 e0       	ldi	r31, 0x04	; 4
 19a:	80 81       	ld	r24, Z
 19c:	87 7f       	andi	r24, 0xF7	; 247
 19e:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 1a0:	89 b1       	in	r24, 0x09	; 9
 1a2:	8e 7f       	andi	r24, 0xFE	; 254
 1a4:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 1a6:	88 b1       	in	r24, 0x08	; 8
 1a8:	81 60       	ori	r24, 0x01	; 1
 1aa:	88 b9       	out	0x08, r24	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 1ac:	89 b1       	in	r24, 0x09	; 9
 1ae:	82 60       	ori	r24, 0x02	; 2
 1b0:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 1b2:	88 b1       	in	r24, 0x08	; 8
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 1b8:	89 b1       	in	r24, 0x09	; 9
 1ba:	8b 7f       	andi	r24, 0xFB	; 251
 1bc:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 1be:	88 b1       	in	r24, 0x08	; 8
 1c0:	84 60       	ori	r24, 0x04	; 4
 1c2:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 1c4:	89 b1       	in	r24, 0x09	; 9
 1c6:	87 7f       	andi	r24, 0xF7	; 247
 1c8:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 1ca:	88 b1       	in	r24, 0x08	; 8
 1cc:	88 60       	ori	r24, 0x08	; 8
 1ce:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	SDI_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
 1d0:	0e 94 8c 00 	call	0x118	; 0x118 <CLKCTRL_init>

	USART_0_initialization();
 1d4:	0e 94 b5 00 	call	0x16a	; 0x16a <USART_0_initialization>

	CPUINT_init();
 1d8:	0e 94 8e 00 	call	0x11c	; 0x11c <CPUINT_init>

	SLPCTRL_init();
 1dc:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <SLPCTRL_init>

	BOD_init();
 1e0:	0e 94 8a 00 	call	0x114	; 0x114 <BOD_init>
 1e4:	08 95       	ret

000001e6 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	08 95       	ret

000001ea <transmitCharacter>:

void allOn() {
	transmitCharacter(ALL_ON, PACKET_FULL);
}
void allOff() {
	transmitCharacter(ALL_OFF, PACKET_FULL);
 1ea:	26 2f       	mov	r18, r22
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	0e 94 1a 01 	call	0x234	; 0x234 <sendBits>
 1f4:	0e 94 49 01 	call	0x292	; 0x292 <pulseLatch>
 1f8:	08 95       	ret

000001fa <enableOutput>:
 1fa:	89 b1       	in	r24, 0x09	; 9
 1fc:	8d 7f       	andi	r24, 0xFD	; 253
 1fe:	89 b9       	out	0x09, r24	; 9
 200:	08 95       	ret

00000202 <allOn>:
 202:	68 e0       	ldi	r22, 0x08	; 8
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	0e 94 f5 00 	call	0x1ea	; 0x1ea <transmitCharacter>
 20a:	08 95       	ret

0000020c <switchToSpecialMode>:
}

void switchToSpecialMode() {
	sendBits(DATA_NULL, STSM_OE, STSM_LE, PACKET_MODE);
 20c:	25 e0       	ldi	r18, 0x05	; 5
 20e:	48 e0       	ldi	r20, 0x08	; 8
 210:	6d e1       	ldi	r22, 0x1D	; 29
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 1a 01 	call	0x234	; 0x234 <sendBits>
 218:	08 95       	ret

0000021a <switchToNormalMode>:
}

void switchToNormalMode() {	
	sendBits(DATA_NULL, STNM_OE, STNM_LE, PACKET_MODE);
 21a:	25 e0       	ldi	r18, 0x05	; 5
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	6d e1       	ldi	r22, 0x1D	; 29
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 1a 01 	call	0x234	; 0x234 <sendBits>
 226:	08 95       	ret

00000228 <writeConfiguration>:
}

void writeConfiguration(uint8_t c) {
	sendBits(c, WCC_OE, WCC_LE, PACKET_FULL);
 228:	28 e0       	ldi	r18, 0x08	; 8
 22a:	40 e8       	ldi	r20, 0x80	; 128
 22c:	6f ef       	ldi	r22, 0xFF	; 255
 22e:	0e 94 1a 01 	call	0x234	; 0x234 <sendBits>
 232:	08 95       	ret

00000234 <sendBits>:



void sendBits(char d, char o, char l, char c) {
	char bitMask = 1;
	for(char i = 0; i < c; i++) {
 234:	50 e0       	ldi	r21, 0x00	; 0
#include "TLC5916_Util.h"



void sendBits(char d, char o, char l, char c) {
	char bitMask = 1;
 236:	91 e0       	ldi	r25, 0x01	; 1
	for(char i = 0; i < c; i++) {
 238:	26 c0       	rjmp	.+76     	; 0x286 <sendBits+0x52>
		SDI_set_level((d & bitMask) > 0);
 23a:	39 2f       	mov	r19, r25
 23c:	38 23       	and	r19, r24
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
 23e:	21 f0       	breq	.+8      	; 0x248 <sendBits+0x14>
		VPORTC.OUT |= (1 << pin);
 240:	39 b1       	in	r19, 0x09	; 9
 242:	38 60       	ori	r19, 0x08	; 8
 244:	39 b9       	out	0x09, r19	; 9
 246:	03 c0       	rjmp	.+6      	; 0x24e <sendBits+0x1a>
	} else {
		VPORTC.OUT &= ~(1 << pin);
 248:	39 b1       	in	r19, 0x09	; 9
 24a:	37 7f       	andi	r19, 0xF7	; 247
 24c:	39 b9       	out	0x09, r19	; 9
		OE_ED2_set_level( (o & bitMask) > 0 );
 24e:	39 2f       	mov	r19, r25
 250:	36 23       	and	r19, r22
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
 252:	21 f0       	breq	.+8      	; 0x25c <sendBits+0x28>
		VPORTC.OUT |= (1 << pin);
 254:	39 b1       	in	r19, 0x09	; 9
 256:	32 60       	ori	r19, 0x02	; 2
 258:	39 b9       	out	0x09, r19	; 9
 25a:	03 c0       	rjmp	.+6      	; 0x262 <sendBits+0x2e>
	} else {
		VPORTC.OUT &= ~(1 << pin);
 25c:	39 b1       	in	r19, 0x09	; 9
 25e:	3d 7f       	andi	r19, 0xFD	; 253
 260:	39 b9       	out	0x09, r19	; 9
		LE_ED1_set_level( (l & bitMask) > 0 );
 262:	39 2f       	mov	r19, r25
 264:	34 23       	and	r19, r20
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
 266:	21 f0       	breq	.+8      	; 0x270 <sendBits+0x3c>
		VPORTC.OUT |= (1 << pin);
 268:	39 b1       	in	r19, 0x09	; 9
 26a:	34 60       	ori	r19, 0x04	; 4
 26c:	39 b9       	out	0x09, r19	; 9
 26e:	03 c0       	rjmp	.+6      	; 0x276 <sendBits+0x42>
	} else {
		VPORTC.OUT &= ~(1 << pin);
 270:	39 b1       	in	r19, 0x09	; 9
 272:	3b 7f       	andi	r19, 0xFB	; 251
 274:	39 b9       	out	0x09, r19	; 9
		bitMask = bitMask << 1;
 276:	99 0f       	add	r25, r25
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 278:	39 b1       	in	r19, 0x09	; 9
 27a:	31 60       	ori	r19, 0x01	; 1
 27c:	39 b9       	out	0x09, r19	; 9
	} else {
		VPORTC.OUT &= ~(1 << pin);
 27e:	39 b1       	in	r19, 0x09	; 9
 280:	3e 7f       	andi	r19, 0xFE	; 254
 282:	39 b9       	out	0x09, r19	; 9



void sendBits(char d, char o, char l, char c) {
	char bitMask = 1;
	for(char i = 0; i < c; i++) {
 284:	5f 5f       	subi	r21, 0xFF	; 255
 286:	52 17       	cp	r21, r18
 288:	c0 f2       	brcs	.-80     	; 0x23a <sendBits+0x6>
 28a:	89 b1       	in	r24, 0x09	; 9
 28c:	87 7f       	andi	r24, 0xF7	; 247
 28e:	89 b9       	out	0x09, r24	; 9
 290:	08 95       	ret

00000292 <pulseLatch>:
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 292:	89 b1       	in	r24, 0x09	; 9
 294:	84 60       	ori	r24, 0x04	; 4
 296:	89 b9       	out	0x09, r24	; 9
	} else {
		VPORTC.OUT &= ~(1 << pin);
 298:	89 b1       	in	r24, 0x09	; 9
 29a:	8b 7f       	andi	r24, 0xFB	; 251
 29c:	89 b9       	out	0x09, r24	; 9
 29e:	08 95       	ret

000002a0 <USART_0_init>:
 * \retval 1 the USART init was not successful
 */
int8_t USART_0_init()
{

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(115200); /* set baud rate register */
 2a0:	e0 e0       	ldi	r30, 0x00	; 0
 2a2:	f8 e0       	ldi	r31, 0x08	; 8
 2a4:	84 e7       	ldi	r24, 0x74	; 116
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	80 87       	std	Z+8, r24	; 0x08
 2aa:	91 87       	std	Z+9, r25	; 0x09
	//		 | USART_RS485_DISABLE_gc /* RS485 Mode disabled */
	//		 | 0 << USART_RXCIE_bp /* Receive Complete Interrupt Enable: disabled */
	//		 | 0 << USART_RXSIE_bp /* Receiver Start Frame Interrupt Enable: disabled */
	//		 | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
 2ac:	80 ec       	ldi	r24, 0xC0	; 192
 2ae:	86 83       	std	Z+6, r24	; 0x06
	// USART0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc /* Asynchronous Mode */
	//		 | USART_CHSIZE_8BIT_gc /* Character size: 8 bit */
	//		 | USART_PMODE_DISABLED_gc /* No Parity */
	//		 | USART_SBMODE_1BIT_gc; /* 1 stop bit */

	USART0.DBGCTRL = 1 << USART_DBGRUN_bp; /* Debug Run: enabled */
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	83 87       	std	Z+11, r24	; 0x0b
	// USART0.RXPLCTRL = 0x0 << USART_RXPL_gp; /* Receiver Pulse Length: 0x0 */

	// USART0.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	return 0;
}
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret

000002b8 <_exit>:
 2b8:	f8 94       	cli

000002ba <__stop_program>:
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <__stop_program>
