
ATTINY1627_TLC5916_FULL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000260  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001d8  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003204  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002165  00000000  00000000  00003700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ec7  00000000  00000000  00005865  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002ac  00000000  00000000  0000672c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000132e  00000000  00000000  000069d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000547  00000000  00000000  00007d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  0000824d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a0 30       	cpi	r26, 0x00	; 0
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  98:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a0:	0e 94 c4 00 	call	0x188	; 0x188 <system_init>
  a4:	08 95       	ret

000000a6 <nightRider>:
	while (1) {
		
	}
}

void nightRider() {
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
	char out = 1;
	char dir = 1;
	for(int i = 0; i < 16; i++) {
  ae:	c0 e0       	ldi	r28, 0x00	; 0
  b0:	d0 e0       	ldi	r29, 0x00	; 0
	}
}

void nightRider() {
	char out = 1;
	char dir = 1;
  b2:	01 e0       	ldi	r16, 0x01	; 1
		
	}
}

void nightRider() {
	char out = 1;
  b4:	11 e0       	ldi	r17, 0x01	; 1
	char dir = 1;
	for(int i = 0; i < 16; i++) {
  b6:	1b c0       	rjmp	.+54     	; 0xee <nightRider+0x48>
		transmitCharacter(out);
  b8:	81 2f       	mov	r24, r17
  ba:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <transmitCharacter>
		if(dir == 1) {
  be:	01 30       	cpi	r16, 0x01	; 1
  c0:	21 f4       	brne	.+8      	; 0xca <nightRider+0x24>
			if(out == 128) {
  c2:	10 38       	cpi	r17, 0x80	; 128
  c4:	41 f0       	breq	.+16     	; 0xd6 <nightRider+0x30>
				dir = 0;
				} else {
				out = out << 1;
  c6:	11 0f       	add	r17, r17
  c8:	09 c0       	rjmp	.+18     	; 0xdc <nightRider+0x36>
			}
			} else if(dir == 0) {
  ca:	01 11       	cpse	r16, r1
  cc:	07 c0       	rjmp	.+14     	; 0xdc <nightRider+0x36>
			if(out == 1) {
  ce:	11 30       	cpi	r17, 0x01	; 1
  d0:	21 f0       	breq	.+8      	; 0xda <nightRider+0x34>
				dir = 1;
				} else {
				out = out >> 1;
  d2:	16 95       	lsr	r17
  d4:	03 c0       	rjmp	.+6      	; 0xdc <nightRider+0x36>
	char dir = 1;
	for(int i = 0; i < 16; i++) {
		transmitCharacter(out);
		if(dir == 1) {
			if(out == 128) {
				dir = 0;
  d6:	00 e0       	ldi	r16, 0x00	; 0
  d8:	01 c0       	rjmp	.+2      	; 0xdc <nightRider+0x36>
				} else {
				out = out << 1;
			}
			} else if(dir == 0) {
			if(out == 1) {
				dir = 1;
  da:	01 e0       	ldi	r16, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2a e6       	ldi	r18, 0x6A	; 106
  de:	84 e0       	ldi	r24, 0x04	; 4
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <nightRider+0x3c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <nightRider+0x46>
}

void nightRider() {
	char out = 1;
	char dir = 1;
	for(int i = 0; i < 16; i++) {
  ec:	21 96       	adiw	r28, 0x01	; 1
  ee:	c0 31       	cpi	r28, 0x10	; 16
  f0:	d1 05       	cpc	r29, r1
  f2:	14 f3       	brlt	.-60     	; 0xb8 <nightRider+0x12>
			}
		}
		_delay_us(100000);
	}
	
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	08 95       	ret

000000fe <main>:

void nightRider();

int main(void)
{
	atmel_start_init();
  fe:	0e 94 50 00 	call	0xa0	; 0xa0 <atmel_start_init>
		
	enableOutput();
 102:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <enableOutput>
	
	nightRider();
 106:	0e 94 53 00 	call	0xa6	; 0xa6 <nightRider>
	
	allOn();
 10a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <allOn>
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>

00000110 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	08 95       	ret

00000114 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret

00000118 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret

0000011c <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	08 c0       	rjmp	.+16     	; 0x130 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	e0 5f       	subi	r30, 0xF0	; 240
 126:	fb 4f       	sbci	r31, 0xFB	; 251
 128:	90 81       	ld	r25, Z
 12a:	98 60       	ori	r25, 0x08	; 8
 12c:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	88 30       	cpi	r24, 0x08	; 8
 132:	b0 f3       	brcs	.-20     	; 0x120 <mcu_init+0x4>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 c0       	rjmp	.+16     	; 0x148 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 138:	e8 2f       	mov	r30, r24
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	e0 5d       	subi	r30, 0xD0	; 208
 13e:	fb 4f       	sbci	r31, 0xFB	; 251
 140:	90 81       	ld	r25, Z
 142:	98 60       	ori	r25, 0x08	; 8
 144:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	88 30       	cpi	r24, 0x08	; 8
 14a:	b0 f3       	brcs	.-20     	; 0x138 <mcu_init+0x1c>
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	08 c0       	rjmp	.+16     	; 0x160 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 150:	e8 2f       	mov	r30, r24
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	e0 5b       	subi	r30, 0xB0	; 176
 156:	fb 4f       	sbci	r31, 0xFB	; 251
 158:	90 81       	ld	r25, Z
 15a:	98 60       	ori	r25, 0x08	; 8
 15c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	88 30       	cpi	r24, 0x08	; 8
 162:	b0 f3       	brcs	.-20     	; 0x150 <mcu_init+0x34>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 164:	08 95       	ret

00000166 <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 166:	84 b1       	in	r24, 0x04	; 4
 168:	87 7f       	andi	r24, 0xF7	; 247
 16a:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 16c:	e3 e3       	ldi	r30, 0x33	; 51
 16e:	f4 e0       	ldi	r31, 0x04	; 4
 170:	80 81       	ld	r24, Z
 172:	87 7f       	andi	r24, 0xF7	; 247
 174:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 176:	85 b1       	in	r24, 0x05	; 5
 178:	8b 7f       	andi	r24, 0xFB	; 251
 17a:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 17c:	84 b1       	in	r24, 0x04	; 4
 17e:	84 60       	ori	r24, 0x04	; 4
 180:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB2_set_dir(PORT_DIR_OUT);

	USART_0_init();
 182:	0e 94 22 01 	call	0x244	; 0x244 <USART_0_init>
 186:	08 95       	ret

00000188 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 188:	0e 94 8e 00 	call	0x11c	; 0x11c <mcu_init>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 18c:	84 b1       	in	r24, 0x04	; 4
 18e:	8f 7b       	andi	r24, 0xBF	; 191
 190:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 192:	e6 e3       	ldi	r30, 0x36	; 54
 194:	f4 e0       	ldi	r31, 0x04	; 4
 196:	80 81       	ld	r24, Z
 198:	87 7f       	andi	r24, 0xF7	; 247
 19a:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 19c:	89 b1       	in	r24, 0x09	; 9
 19e:	8e 7f       	andi	r24, 0xFE	; 254
 1a0:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 1a2:	88 b1       	in	r24, 0x08	; 8
 1a4:	81 60       	ori	r24, 0x01	; 1
 1a6:	88 b9       	out	0x08, r24	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 1a8:	89 b1       	in	r24, 0x09	; 9
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 1ae:	88 b1       	in	r24, 0x08	; 8
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 1b4:	89 b1       	in	r24, 0x09	; 9
 1b6:	8b 7f       	andi	r24, 0xFB	; 251
 1b8:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 1ba:	88 b1       	in	r24, 0x08	; 8
 1bc:	84 60       	ori	r24, 0x04	; 4
 1be:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 1c0:	89 b1       	in	r24, 0x09	; 9
 1c2:	87 7f       	andi	r24, 0xF7	; 247
 1c4:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 1c6:	88 b1       	in	r24, 0x08	; 8
 1c8:	88 60       	ori	r24, 0x08	; 8
 1ca:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	SDI_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
 1cc:	0e 94 8a 00 	call	0x114	; 0x114 <CLKCTRL_init>

	USART_0_initialization();
 1d0:	0e 94 b3 00 	call	0x166	; 0x166 <USART_0_initialization>

	CPUINT_init();
 1d4:	0e 94 8c 00 	call	0x118	; 0x118 <CPUINT_init>

	SLPCTRL_init();
 1d8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <SLPCTRL_init>

	BOD_init();
 1dc:	0e 94 88 00 	call	0x110	; 0x110 <BOD_init>
 1e0:	08 95       	ret

000001e2 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	08 95       	ret

000001e6 <transmitCharacter>:
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 1e6:	0e 94 00 01 	call	0x200	; 0x200 <sendChar>
 1ea:	0e 94 1b 01 	call	0x236	; 0x236 <latch>
 1ee:	08 95       	ret

000001f0 <enableOutput>:
 1f0:	89 b1       	in	r24, 0x09	; 9
 1f2:	8d 7f       	andi	r24, 0xFD	; 253
 1f4:	89 b9       	out	0x09, r24	; 9
 1f6:	08 95       	ret

000001f8 <allOn>:
}
void disableOutput() {
	OE_ED2_set_level(true);
}
void allOn() {
	transmitCharacter(0xFF);
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <transmitCharacter>
 1fe:	08 95       	ret

00000200 <sendChar>:

#include "TLC5916_Util.h"

void sendChar(char p) {
	char bitMask = 1;
	for(char i = 0; i < 8; i++) {
 200:	20 e0       	ldi	r18, 0x00	; 0
 */ 

#include "TLC5916_Util.h"

void sendChar(char p) {
	char bitMask = 1;
 202:	31 e0       	ldi	r19, 0x01	; 1
	for(char i = 0; i < 8; i++) {
 204:	12 c0       	rjmp	.+36     	; 0x22a <sendChar+0x2a>
		SDI_set_level((p & bitMask) > 0);
 206:	93 2f       	mov	r25, r19
 208:	98 23       	and	r25, r24
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
 20a:	21 f0       	breq	.+8      	; 0x214 <sendChar+0x14>
		VPORTC.OUT |= (1 << pin);
 20c:	99 b1       	in	r25, 0x09	; 9
 20e:	98 60       	ori	r25, 0x08	; 8
 210:	99 b9       	out	0x09, r25	; 9
 212:	03 c0       	rjmp	.+6      	; 0x21a <sendChar+0x1a>
	} else {
		VPORTC.OUT &= ~(1 << pin);
 214:	99 b1       	in	r25, 0x09	; 9
 216:	97 7f       	andi	r25, 0xF7	; 247
 218:	99 b9       	out	0x09, r25	; 9
		bitMask = bitMask << 1;
 21a:	33 0f       	add	r19, r19
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 21c:	99 b1       	in	r25, 0x09	; 9
 21e:	91 60       	ori	r25, 0x01	; 1
 220:	99 b9       	out	0x09, r25	; 9
	} else {
		VPORTC.OUT &= ~(1 << pin);
 222:	99 b1       	in	r25, 0x09	; 9
 224:	9e 7f       	andi	r25, 0xFE	; 254
 226:	99 b9       	out	0x09, r25	; 9

#include "TLC5916_Util.h"

void sendChar(char p) {
	char bitMask = 1;
	for(char i = 0; i < 8; i++) {
 228:	2f 5f       	subi	r18, 0xFF	; 255
 22a:	28 30       	cpi	r18, 0x08	; 8
 22c:	60 f3       	brcs	.-40     	; 0x206 <sendChar+0x6>
 22e:	89 b1       	in	r24, 0x09	; 9
 230:	87 7f       	andi	r24, 0xF7	; 247
 232:	89 b9       	out	0x09, r24	; 9
 234:	08 95       	ret

00000236 <latch>:
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 236:	89 b1       	in	r24, 0x09	; 9
 238:	84 60       	ori	r24, 0x04	; 4
 23a:	89 b9       	out	0x09, r24	; 9
	} else {
		VPORTC.OUT &= ~(1 << pin);
 23c:	89 b1       	in	r24, 0x09	; 9
 23e:	8b 7f       	andi	r24, 0xFB	; 251
 240:	89 b9       	out	0x09, r24	; 9
 242:	08 95       	ret

00000244 <USART_0_init>:
 * \retval 1 the USART init was not successful
 */
int8_t USART_0_init()
{

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(115200); /* set baud rate register */
 244:	e0 e0       	ldi	r30, 0x00	; 0
 246:	f8 e0       	ldi	r31, 0x08	; 8
 248:	84 e7       	ldi	r24, 0x74	; 116
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	80 87       	std	Z+8, r24	; 0x08
 24e:	91 87       	std	Z+9, r25	; 0x09
	//		 | USART_RS485_DISABLE_gc /* RS485 Mode disabled */
	//		 | 0 << USART_RXCIE_bp /* Receive Complete Interrupt Enable: disabled */
	//		 | 0 << USART_RXSIE_bp /* Receiver Start Frame Interrupt Enable: disabled */
	//		 | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
 250:	80 ec       	ldi	r24, 0xC0	; 192
 252:	86 83       	std	Z+6, r24	; 0x06
	// USART0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc /* Asynchronous Mode */
	//		 | USART_CHSIZE_8BIT_gc /* Character size: 8 bit */
	//		 | USART_PMODE_DISABLED_gc /* No Parity */
	//		 | USART_SBMODE_1BIT_gc; /* 1 stop bit */

	USART0.DBGCTRL = 1 << USART_DBGRUN_bp; /* Debug Run: enabled */
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	83 87       	std	Z+11, r24	; 0x0b
	// USART0.RXPLCTRL = 0x0 << USART_RXPL_gp; /* Receiver Pulse Length: 0x0 */

	// USART0.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	return 0;
}
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	08 95       	ret

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
